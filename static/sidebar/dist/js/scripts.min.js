!function(a, b) {
    function c() {
        this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent), 
        this.isset = function(a, b) {
            if (arguments.length) {
                var c = a;
                return b && (c = a[b]), "undefined" != typeof c;
            }
        }, this.debounce = function(a, b, c) {
            var d;
            return function() {
                var e = this, f = arguments, g = function() {
                    d = null, c || a.apply(e, f);
                }, h = c && !d;
                clearTimeout(d), d = setTimeout(g, b), h && a.apply(e, f);
            };
        }, this.tmpl = function(a, b) {
            if (a && "object" == typeof b) return a.replace(/\{([\w\.]*)\}/g, function(a, c) {
                for (var d = c.split("."), e = b[d.shift()], f = 0, g = d.length; f < g; f++) e = e[d[f]];
                return "undefined" != typeof e && null !== e ? e : "";
            });
        };
    }
    a.Utils = new c();
}(window, document), function(a, b) {
    function c(c, i) {
        this.xchg = i.xchg || !0, this.windowSize = (a.innerWidth || b.documentElement.clientWidth || b.body.clientWidth) <= 200 ? "small" : "medium", 
        this.initialResize = !0;
        var j = "small" == this.windowSize;
        this.itemsPerPage = j ? 2 : i.itemsperpage || 6, this.itemsPerRow = j ? 1 : i.itemsperrow || 2, 
        this.loginId = i.loginId || i.loginid || 0, this.channel = i.channel || {}, this.loading = !1, 
        this.isLastPage = !1, this.page = 0, this.el = "string" == typeof c ? b.getElementById(c) : c, 
        this.loadBtn = this.el.getElementsByClassName("tvp-sidebar-load")[0], this.container = this.el.getElementsByClassName("tvp-sidebar-container")[0], 
        this.onLoad = i.onLoad && g(i.onLoad) ? i.onLoad : null, this.onLoadEnd = i.onLoadEnd && g(i.onLoadEnd) ? i.onLoadEnd : null, 
        this.onItemClick = i.onItemClick && g(i.onItemClick) ? i.onItemClick : null, this.render = function() {
            this.container.innerHTML = "";
            for (var c = this.data.slice(0), e = []; c.length; ) e.push(c.splice(0, this.itemsPerPage));
            for (var f = 0; f < e.length; f++) {
                for (var g = e[f], i = []; g.length; ) i.push(g.splice(0, this.itemsPerRow));
                for (var j = b.createDocumentFragment(), l = 0; i.length > l; l++) {
                    var m = b.createElement("div");
                    m.classList.add("tvp-clearfix");
                    for (var n = i[l], o = 0; o < n.length; o++) {
                        var p = n[o], q = "";
                        "undefined" != typeof p.entity && (q += " tvp-exchange"), "medium" === k.windowSize && (q += " col-6"), 
                        p.className = q;
                        var r = b.getElementById("gridItemTemplate"), s = d;
                        r && (s = r.innerHTML), m.innerHTML += h(s, p);
                    }
                    j.appendChild(m);
                }
                this.container.appendChild(j), a.parent && a.parent.parent && a.parent.parent.postMessage({
                    event: "tvp_sidebar:render",
                    height: k.el.offsetHeight + "px"
                }, "*");
            }
        };
        var k = this;
        this.load = function(c) {
            k.loading = !0, this.onLoad && this.onLoad();
            var d = function(c) {
                var d = k.channel || {};
                if (f(d) || !d.id) return console.log("bad channel");
                var e = d.parameters || {}, g = "//api.tvpage.com/v1/channels/" + d.id + "/videos?X-login-id=" + k.loginId;
                for (var h in e) g += "&" + h + "=" + e[h];
                var j = i.callbackName || "tvp_" + Math.floor(555 * Math.random());
                g += "&p=" + k.page + "&n=" + k.itemsPerPage + "&callback=" + j;
                var l = b.createElement("script");
                l.src = g, a[j || "callback"] = c, b.body.appendChild(l);
            };
            if (this.xchg) {
                var e = new XMLHttpRequest();
                e.open("GET", "//api2.tvpage.com/prod/channels?X-login-id=1", !0), e.onreadystatechange = function() {
                    e.readyState == XMLHttpRequest.DONE && d(function(a) {
                        var b = [];
                        a.length || (k.isLastPage = !0), k.data = a, c(a.concat(b)), k.loading = !1, k.onLoadEnd && k.onLoadEnd();
                    });
                }, e.send({
                    p: 0,
                    n: 1e3,
                    si: 1,
                    li: 1,
                    "X-login-id": 1
                });
            } else d(function(a) {
                (!a.length || a.length < k.itemsPerPage) && (k.isLastPage = !0), k.data = a, c(a), 
                k.loading = !1, k.onLoadEnd && k.onLoadEnd();
            });
        }, this.next = function() {
            this.isLastPage ? (this.page = 0, this.isLastPage = !1) : this.page++;
        }, this.resize = function() {
            var c = (a.innerWidth || b.documentElement.clientWidth || b.body.clientWidth) <= 200 ? "small" : "medium", d = function() {
                k.initialResize || a.parent && a.parent.parent && a.parent.parent.postMessage({
                    event: "tvp_sidebar:grid_resize",
                    height: k.el.offsetHeight + "px"
                }, "*");
            };
            if (k.windowSize !== c) {
                k.windowSize = c;
                var e = "small" === c;
                k.itemsPerPage = e ? 2 : i.itemsperpage || 6, k.itemsPerRow = e ? 1 : i.itemsperrow || 2, 
                k.load(function() {
                    k.render(), d();
                });
            } else d();
            k.initialResize = !1;
        }, this.el.onclick = function(b) {
            var c = b.target;
            if (c.classList.contains("tvp-video")) {
                for (var d = c.id.split("-").pop(), e = {}, f = k.data, g = 0; g < f.length; g++) f[g].id === d && (e = f[g]);
                a.parent && a.parent.parent && a.parent.parent.postMessage({
                    runTime: "undefined" != typeof a.__TVPage__ ? __TVPage__ : null,
                    event: "tvp_sidebar:video_click",
                    selectedVideo: e,
                    videos: f
                }, "*");
            }
        }, this.loadBtn.onclick = function() {
            k.loading || (k.next(), k.load(function(a) {
                a.length ? k.render(a) : (k.next(), k.load(function(a) {
                    k.render(a);
                }));
            }));
        }, this.load(function(a) {
            k.render(a);
        }), a.addEventListener("resize", e(this.resize, 100));
    }
    var d = '<div id="tvp-video-{id}" class="tvp-video{className}"><div class="tvp-video-image" style="background-image:url({asset.thumbnailUrl})"><svg class="tvp-video-play" viewBox="0 0 200 200" alt="Play video"><polygon points="70, 55 70, 145 145, 100"></polygon></svg></div><p class="tvp-video-title">{title}</p></div>', e = function(a, b, c) {
        var d;
        return function() {
            var e = this, f = arguments, g = function() {
                d = null, c || a.apply(e, f);
            }, h = c && !d;
            clearTimeout(d), d = setTimeout(g, b), h && a.apply(e, f);
        };
    }, f = function(a) {
        for (var b in a) if (a.hasOwnProperty(b)) return !1;
        return !0;
    }, g = function(a) {
        return "function" == typeof a;
    }, h = function(a, b) {
        if (a && "object" == typeof b) return a.replace(/\{([\w\.]*)\}/g, function(a, c) {
            for (var d = c.split("."), e = b[d.shift()], f = 0, g = d.length; f < g; f++) e = e[d[f]];
            return "undefined" != typeof e && null !== e ? e : "";
        });
    };
    a.Grid = c;
}(window, document), function(a, b) {
    var c = function(a, b) {
        var c = a;
        return b && (c = a[b]), "undefined" != typeof c;
    }, d = function(d) {
        var e = function(a) {
            var b = {};
            return c(a) && c(a, "__TVPage__") && c(a.__TVPage__, "config") ? b = a.__TVPage__.config : console.log("need config");
        }, f = {};
        if ("dynamic" === d) {
            var g = e(parent), h = b.body.getAttribute("data-id");
            if (!c(g, h)) return console.log("need settings");
            f = g[h], f.name = h;
        } else if ("inline" === d && d && d.length) {
            var g = e(parent);
            f = g[d], f.name = d;
        } else if ("static" === d) {
            var g = e(a), h = b.body.getAttribute("data-id");
            if (!c(g, h)) return console.log("need settings");
            f = g[h], f.name = h;
        }
        return f;
    }, e = function(a, c) {
        if (!a) return console.log("need target");
        var d = b.createDocumentFragment(), e = b.createElement("div"), f = c || {};
        e.id = f.id || "", e.classList.add("iframe-content"), e.innerHTML = '<div class="tvp-sidebar-title">' + (f.title || "") + '</div><div class="tvp-sidebar-container"></div><div class="tvp-sidebar-footer"><button class="tvp-sidebar-load">' + (f.loadBtnText || "") + '</button></div><div class="tvp-cover"></div>', 
        d.appendChild(e), a.appendChild(d);
    }, f = b.body, g = function() {
        f.classList.contains("dynamic") ? !function(a) {
            var c = JSON.parse(JSON.stringify(a)), d = a.name;
            e(f, {
                id: d,
                title: a.title || "Recommended Videos",
                loadBtnText: a.loadBtnText || "View More"
            });
            var g = b.getElementById(d);
            c.onLoad = function() {
                g.classList.add("loading");
            }, c.onLoadEnd = function() {
                g.classList.remove("loading");
            }, new Grid(d, c);
        }(d("dynamic")) : !function(a) {
            var c = JSON.parse(JSON.stringify(a)), d = a.name, e = b.getElementById(d);
            c.onLoad = function() {
                e.classList.add("loading");
            }, c.onLoadEnd = function() {
                e.classList.remove("loading");
            }, new Grid(d, c);
        }(d("static"));
    };
    if ("undefined" == typeof a.Grid) {
        var h = 0;
        !function b() {
            setTimeout(function() {
                "undefined" == typeof a.Grid ? ++h < 50 ? b() : console.log("limit reached") : g();
            }, 150);
        }();
    } else g();
    a.DEBUG && console.debug("endTime = " + performance.now());
}(window, document);