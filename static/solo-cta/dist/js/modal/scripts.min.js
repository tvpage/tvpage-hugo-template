!function(a, b) {
    function c() {
        this.getByClass = function(a) {
            return b.getElementsByClassName(a || "")[0];
        }, this.isset = function(a, b) {
            if (arguments.length) {
                var c = a;
                return b && (c = a[b]), void 0 !== c;
            }
        };
    }
    a.Utils = new c();
}(window, document), function(a, b) {
    function c() {
        this.initConfig = function(a) {
            if (!(d(a) && d(a.loginId) && d(a.domain) && d(a.logUrl))) return console.warn("need config");
            var b = {
                logUrl: a.logUrl,
                li: a.loginId,
                gaDomain: a.domain
            };
            a.firstPartyCookies && (b.firstPartyCookieDomain = a.cookieDomain), _tvpa.push([ "config", b ]);
        }, this.track = function(a, b) {
            a && d(b) && d(_tvpa) && _tvpa.push([ "track", a, b ]);
        };
    }
    var d = function(a, b) {
        var c = a;
        return b && (c = a[b]), void 0 !== c;
    };
    a.Analytics = c;
}(window, document), function(a, b) {
    function c(c, i, j) {
        if (c && e(i) && e(i.data) && !(i.data.length <= 0)) {
            this.options = i, this.instance = null, this.el = "string" == typeof c ? b.getElementById(c) : c, 
            this.isFullScreen = !1, this.initialResize = !0, this.autoplay = !!e(i.autoplay) && Number(i.autoplay), 
            this.autonext = !e(i.autonext) || Number(i.autonext), this.version = e(i.player_version) ? i.player_version : null, 
            this.removeControls = e(i.remove_controls) ? i.remove_controls : null, this.techOrder = e(i.tech_order) ? i.tech_order : null, 
            this.analytics = e(i.analytics) ? i.analytics : null, this.apiBaseUrl = e(i.api_base_url) ? i.api_base_url : null, 
            this.mediaProviders = e(i.media_providers) ? i.media_providers : null, this.preload = e(i.preload) ? i.preload : null, 
            this.poster = e(i.poster) ? i.poster : null, this.overlay = e(i.overlay) ? i.overlay : null, 
            this.playbutton = g({
                height: e(i.play_button_height) ? i.play_button_height : null,
                width: e(i.play_button_width) ? i.play_button_width : null,
                backgroundColor: e(i.play_button_background_color) ? i.play_button_background_color : null,
                borderRadius: e(i.play_button_border_radius) ? i.play_button_border_radius : null,
                borderWidth: e(i.play_button_border_width) ? i.play_button_border_width : null,
                borderColor: e(i.play_button_border_color) ? i.play_button_border_color : null,
                borderStyle: e(i.play_button_border_style) ? i.play_button_border_style : null,
                iconColor: e(i.play_button_icon_color) ? i.play_button_icon_color : null
            }), this.floater = g({
                controlbarColor: e(i.control_bar_color) ? i.control_bar_color : null,
                iconColor: e(i.icon_color) ? i.icon_color : null,
                removeControls: e(i.remove_controls) ? i.remove_controls : null
            }), this.seekBar = g({
                progressColor: e(i.progress_color) ? i.progress_color : null
            }), this.controls = g({
                active: !0,
                seekBar: this.seekBar,
                floater: this.floater,
                playbutton: this.playbutton,
                overlayColor: e(i.overlay_color) ? i.overlay_color : null,
                overlayOpacity: e(i.overlay_opacity) ? i.overlay_opacity : null
            });
            var k = e(i.advertising) && "object" == typeof i.advertising && !f(i.advertising) ? i.advertising : {};
            this.advertising = g({
                enabled: !!e(k.enabled) && k.enabled,
                adServerUrl: e(k.adServerUrl) ? k.adServerUrl : null,
                adTimeout: e(k.adTimeout) ? k.adTimeout : "2000",
                maxAds: e(k.maxAds) ? k.maxAds : "100",
                adInterval: e(k.adInterval) ? String(k.adInterval) : "0"
            }), this.onNext = e(i.onNext) && "function" == typeof i.onNext ? i.onNext : null, 
            this.onPlayerReady = e(i.onPlayerReady) && "function" == typeof i.onPlayerReady ? i.onPlayerReady : null, 
            this.onFullscreenChange = e(i.onFullscreenChange) && "function" == typeof i.onFullscreenChange ? i.onFullscreenChange : null;
            var l = this;
            this.getOption = function(a) {
                return this.options.hasOwnProperty(a) ? this.options.hasOwnProperty(a) : null;
            }, this.createAsset = function(a) {
                if (a && "object" == typeof a && !f(a) && e(a, "asset")) {
                    var b = a.asset;
                    if (b.assetId = a.id, b.assetTitle = a.title, b.loginId = a.loginId, e(a, "events") && a.events.length) b.analyticsLogUrl = a.analytics, 
                    b.analyticsObj = a.events[1].data; else {
                        var c = e(a, "parentId") ? a.parentId : e(i, "channel") ? i.channel.id : 0;
                        c || !i.channelId && !i.channelid || (c = i.channelId || i.channelid), b.analyticsObj = {
                            pg: c,
                            vd: a.id,
                            li: a.loginId
                        };
                    }
                    return b.sources || (b.sources = [ {
                        file: b.videoId
                    } ]), b.type = b.type || "youtube", b;
                }
            }, this.assets = function(a) {
                for (var b = [], c = 0; c < a.length; c++) {
                    var d = a[c];
                    if (f(d)) break;
                    b.push(l.createAsset(d));
                }
                return b;
            }(i.data), this.willCue = function(a) {
                var b = !1, c = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                return a ? (c || e(this.autonext) && !this.autonext) && (b = !0) : (c || e(this.autoplay) && !this.autoplay) && (b = !0), 
                b;
            }, this.play = function(a, b, c) {
                a && (c || (this.current = this.getCurrentIndex(a.assetId)), this.willCue(b) ? this.instance.cueVideo(a) : this.instance.loadVideo(a));
            }, this.addData = function(a) {
                if (a && a.length) {
                    for (var b = [], c = 0; c < a.length; c++) b.push(this.createAsset(a[c]));
                    this.assets = this.assets.concat(b);
                }
            }, this.resize = function() {
                if (l.instance && !l.isFullScreen) {
                    var a, b;
                    if (arguments.length && arguments[0] && arguments[1]) a = arguments[0], b = arguments[1]; else {
                        var c = l.el.parentNode;
                        a = c.clientWidth, b = c.clientHeight;
                    }
                    l.instance.resize(a, b), this.onResize && this.onResize(l.initialResize, [ a, b ]), 
                    l.initialResize = !1;
                }
            }, this.getCurrentIndex = function(a) {
                for (var b = 0, c = 0; c < this.assets.length; c++) this.assets[c].assetId === (a || "") && (b = c);
                return b;
            }, this.onReady = function(b, c) {
                l.analytics = new Analytics();
                var f = i.loginId || i.loginid;
                if (l.analytics.initConfig({
                    domain: h,
                    logUrl: l.apiBaseUrl + "/__tvpa.gif",
                    loginId: f,
                    firstPartyCookies: i.firstpartycookies,
                    cookieDomain: i.cookiedomain
                }), l.analytics.track("ci", {
                    li: f
                }), l.instance = c, l.resize(), e(a, "BigScreen") && (BigScreen.onchange = function() {
                    l.isFullScreen = !l.isFullScreen, l.resize(), l.onFullscreenChange && l.onFullscreenChange();
                }), a.location !== a.parent.location && d) {
                    var g = function(a) {
                        if (a && e(a, "data") && ("tvp_" + i.id).replace(/-/g, "_") + ":holder_resize" === (a.data.event || "")) {
                            var b = a.data.size || [];
                            l.resize(b[0], b[1]);
                        }
                    };
                    a.removeEventListener("message", g, !1), a.addEventListener("message", g, !1);
                } else a.removeEventListener("resize", l.resize, !1), a.addEventListener("resize", l.resize, !1);
                l.onPlayerReady && l.onPlayerReady();
            }, l.onStateChange = function(a) {
                if ("tvp:media:videoended" === a && (l.current++, l.assets[l.current] || (l.current = 0), 
                l.play(l.assets[l.current], !0)), "tvp:media:videoplaying" === a && l.onNext && l.onNext(l.assets[l.current]), 
                "tvp:media:videoplaying" === a) {
                    var b = l.el.querySelector(".tvp-overlay");
                    b && b.parentNode.removeChild(b);
                }
            };
            var m = 0;
            !function b() {
                setTimeout(function() {
                    if (e(a, "TVPage") && e(a, "_tvpa") || !(++m < 200)) {
                        for (var c = {
                            techOrder: l.techOrder,
                            mediaProviders: l.mediaProviders,
                            analytics: {
                                tvpa: l.analytics
                            },
                            apiBaseUrl: l.apiBaseUrl,
                            swf: "//cdnjs.tvpage.com/tvplayer/tvp-" + l.version + ".swf",
                            onReady: l.onReady,
                            onStateChange: l.onStateChange,
                            divId: l.el.id,
                            controls: l.controls,
                            version: l.version,
                            advertising: l.advertising,
                            preload: l.preload
                        }, d = [ "preload", "poster", "overlay" ], f = 0; f < d.length; f++) {
                            var g = d[f];
                            null !== l[g] && (c[g] = l[g]);
                        }
                        var f, h = {
                            techOrder: 1,
                            analytics: 1,
                            apiBaseUrl: 1,
                            swf: 1,
                            controls: 1,
                            width: 1,
                            height: 1,
                            mediaProviders: 1,
                            preload: 1,
                            poster: 1,
                            overlay: 1
                        };
                        for (var i in l.options) c.hasOwnProperty(i) && !h.hasOwnProperty(i) || (c[i] = l.options[i]);
                        l.player = new TVPage.player(c), l.current = l.assets[l.getCurrentIndex(j)], l.willCue() ? l.player.cueVideo(l.current) : l.player.loadVideo(l.current);
                    } else b();
                }, 150);
            }();
        }
    }
    var d = /iPad|iPhone|iPod|iPhone Simulator|iPad Simulator/.test(navigator.userAgent) && !a.MSStream, e = function(a, b) {
        var c = a;
        return b && (c = a[b]), void 0 !== c;
    }, f = function(a) {
        for (var b in a) if (a.hasOwnProperty(b)) return !1;
        return !0;
    }, g = function(a) {
        if (a || "object" == typeof a) {
            for (var b in a) a[b] || delete a[b];
            return a;
        }
    }, h = e(location, "hostname") ? location.hostname : "";
    a.Player = c;
}(window, document), function(a, b) {
    var c = null, d = "tvp_" + (b.body.getAttribute("data-id") || "").replace(/-/g, "_"), e = function() {
        var b = Utils.getByClass("iframe-content"), e = function(c) {
            var e = JSON.parse(JSON.stringify(c.runTime));
            e.data = c.data, e.onResize = function() {
                setTimeout(function() {
                    a.parent && a.parent.postMessage({
                        event: d + ":modal_resize",
                        height: b.offsetHeight + "px"
                    }, "*");
                }, 0);
            }, e.onNext = function(b) {
                b && setTimeout(function() {
                    a.parent && a.parent.postMessage({
                        event: d + ":player_next",
                        next: b
                    }, "*");
                }, 0);
            }, new Player("tvp-player-el", e, c.selectedVideo.id);
        };
        a.addEventListener("message", function(a) {
            if (a && Utils.isset(a, "data") && Utils.isset(a.data, "event")) {
                var b = a.data;
                if (d + ":modal_data" === b.event) {
                    e(b);
                    var f = b.runTime;
                    f.loginid || f.loginId;
                    c = Utils.isset(f.channel) && Utils.isset(f.channel.id) ? f.channel.id : f.channelId;
                }
            }
        }), setTimeout(function() {
            a.parent && a.parent.postMessage({
                event: d + ":modal_initialized",
                height: b.offsetHeight + 20 + "px"
            }, "*");
        }, 0);
    }, f = function(a) {
        return void 0 === a;
    };
    if (f(a.TVPage) || f(a._tvpa) || f(a.Utils) || f(a.Analytics) || f(a.Player)) {
        var g = 0;
        !function b() {
            setTimeout(function() {
                f(a.TVPage) || f(a._tvpa) || f(a.Utils) || f(a.Analytics) || f(a.Player) ? ++g < 50 && b() : e();
            }, 150);
        }();
    } else e();
}(window, document);