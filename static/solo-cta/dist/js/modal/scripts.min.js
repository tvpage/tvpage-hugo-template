!function(a, b) {
    function c() {
        this.getByClass = function(a) {
            return b.getElementsByClassName(a || "")[0];
        }, this.isset = function(a, b) {
            if (arguments.length) {
                var c = a;
                return b && (c = a[b]), void 0 !== c;
            }
        };
    }
    a.Utils = new c();
}(window, document), function(a, b) {
    function c() {
        this.initConfig = function(a) {
            if (!(d(a) && d(a.loginId) && d(a.domain) && d(a.logUrl))) return console.warn("need config");
            var b = {
                logUrl: a.logUrl,
                li: a.loginId,
                gaDomain: a.domain
            };
            a.firstPartyCookies && (b.firstPartyCookieDomain = a.cookieDomain), _tvpa.push([ "config", b ]);
        }, this.track = function(a, b) {
            a && d(b) && d(_tvpa) && _tvpa.push([ "track", a, b ]);
        };
    }
    var d = function(a, b) {
        var c = a;
        return b && (c = a[b]), void 0 !== c;
    };
    a.Analytics = c;
}(window, document), function(a, b) {
    function c(c, j, k) {
        if (c && d(j) && d(j.data) && !(j.data.length <= 0)) {
            this.options = j, this.instance = null, this.el = "string" == typeof c ? b.getElementById(c) : c, 
            this.isFullScreen = !1, this.initialResize = !0, this.autoplay = !!d(j.autoplay) && Number(j.autoplay), 
            this.autonext = !d(j.autonext) || Number(j.autonext), this.version = d(j.player_version) ? j.player_version : null, 
            this.onPlayerChange = d(j.onPlayerChange) ? j.onPlayerChange : null, this.removeControls = d(j.remove_controls) ? j.remove_controls : null, 
            this.techOrder = d(j.tech_order) ? j.tech_order : null, this.analytics = d(j.analytics) ? j.analytics : null, 
            this.apiBaseUrl = d(j.api_base_url) ? j.api_base_url : null, this.mediaProviders = d(j.media_providers) ? j.media_providers : null, 
            this.preload = d(j.preload) ? j.preload : null, this.poster = d(j.poster) ? j.poster : null, 
            this.overlay = d(j.overlay) ? j.overlay : null, this.playbutton = g({
                height: d(j.play_button_height) ? j.play_button_height : null,
                width: d(j.play_button_width) ? j.play_button_width : null,
                backgroundColor: d(j.play_button_background_color) ? j.play_button_background_color : null,
                borderRadius: d(j.play_button_border_radius) ? j.play_button_border_radius : null,
                borderWidth: d(j.play_button_border_width) ? j.play_button_border_width : null,
                borderColor: d(j.play_button_border_color) ? j.play_button_border_color : null,
                borderStyle: d(j.play_button_border_style) ? j.play_button_border_style : null,
                iconColor: d(j.play_button_icon_color) ? j.play_button_icon_color : null
            }), this.floater = g({
                controlbarColor: d(j.control_bar_color) ? j.control_bar_color : null,
                iconColor: d(j.icon_color) ? j.icon_color : null,
                removeControls: d(j.remove_controls) ? j.remove_controls : null
            }), this.seekBar = g({
                progressColor: d(j.progress_color) ? j.progress_color : null
            }), this.controls = g({
                active: !0,
                seekBar: this.seekBar,
                floater: this.floater,
                playbutton: this.playbutton,
                overlayColor: d(j.overlay_color) ? j.overlay_color : null,
                overlayOpacity: d(j.overlay_opacity) ? j.overlay_opacity : null
            });
            var l = d(j.advertising) && "object" == typeof j.advertising && !e(j.advertising) ? j.advertising : {};
            this.advertising = g({
                enabled: !!d(l.enabled) && l.enabled,
                adServerUrl: d(l.adServerUrl) ? l.adServerUrl : null,
                adTimeout: d(l.adTimeout) ? l.adTimeout : "2000",
                maxAds: d(l.maxAds) ? l.maxAds : "100",
                adInterval: d(l.adInterval) ? String(l.adInterval) : "0"
            }), this.onResize = d(j.onResize) && f(j.onResize) ? j.onResize : null, this.onNext = d(j.onNext) && f(j.onNext) ? j.onNext : null, 
            this.assets = function(a) {
                for (var b = [], c = 0; c < a.length; c++) {
                    var f = a[c];
                    if (e(f)) break;
                    var g = f.asset;
                    if (g.assetId = f.id, g.assetTitle = f.title, g.loginId = f.loginId, d(f, "events") && f.events.length) g.analyticsLogUrl = f.analytics, 
                    g.analyticsObj = f.events[1].data; else {
                        var h = d(f, "parentId") ? f.parentId : d(j, "channel") ? j.channel.id : 0;
                        h || !j.channelId && !j.channelid || (h = j.channelId || j.channelid), g.analyticsObj = {
                            pg: h,
                            vd: f.id,
                            li: f.loginId
                        };
                    }
                    g.sources || (g.sources = [ {
                        file: g.videoId
                    } ]), g.type = g.type || "youtube", b.push(g);
                }
                return b;
            }(j.data);
            var m = this;
            this.getOption = function(a) {
                return this.options.hasOwnProperty(a) ? this.options.hasOwnProperty(a) : null;
            }, this.play = function(a, b) {
                if (a) {
                    var c = !1, e = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                    b ? (e || d(this.autonext) && !this.autonext) && (c = !0) : (e || d(this.autoplay) && !this.autoplay) && (c = !0), 
                    c ? this.instance.cueVideo(a) : this.instance.loadVideo(a);
                }
            }, this.resize = function() {
                if (m.instance && !m.isFullScreen) {
                    var a, b;
                    if (arguments.length > 1 && arguments[0] && arguments[1]) a = arguments[0], b = arguments[1]; else {
                        var c = m.el.parentNode;
                        a = c.clientWidth, b = c.clientHeight;
                    }
                    m.instance.resize(a, b), m.onResize && (m.onResize(m.initialResize, [ a, b ]), m.initialResize = !1);
                }
            };
            var n = 0;
            !function b() {
                setTimeout(function() {
                    if (d(a, "TVPage") && d(a, "_tvpa")) {
                        for (var c = {
                            techOrder: m.techOrder,
                            mediaProviders: m.mediaProviders,
                            analytics: {
                                tvpa: m.analytics
                            },
                            apiBaseUrl: m.apiBaseUrl,
                            swf: "//cdnjs.tvpage.com/tvplayer/tvp-" + m.version + ".swf",
                            onReady: function(b, c) {
                                m.analytics = new Analytics();
                                var e = j.loginId || j.loginid;
                                if (m.analytics.initConfig({
                                    domain: h,
                                    logUrl: m.apiBaseUrl + "/__tvpa.gif",
                                    loginId: e,
                                    firstPartyCookies: j.firstpartycookies,
                                    cookieDomain: j.cookiedomain
                                }), m.instance = c, m.resize(), d(a, "BigScreen") && (BigScreen.onchange = function() {
                                    m.isFullScreen = !m.isFullScreen;
                                }), a.location !== a.parent.location && /iPad|iPhone|iPod|iPhone Simulator|iPad Simulator/.test(navigator.userAgent) && !a.MSStream) {
                                    var f = function(a) {
                                        if (a && d(a, "data") && d(a.data, "event") && "tvp_" + j.id.replace(/-/g, "_") + ":modal_holder_resize" === a.data.event) {
                                            var b = a.data.size || [];
                                            m.resize(b[0], b[1]);
                                        }
                                    };
                                    a.removeEventListener("message", f, !1), a.addEventListener("message", f, !1);
                                } else {
                                    var g = m.resize;
                                    a.removeEventListener("message", g, !1), a.addEventListener("resize", g);
                                }
                                m.el.querySelector(".tvp-progress-bar").style.backgroundColor = m.progressColor;
                                var i = 0;
                                if (k && k.length) for (var l = 0; l < m.assets.length; l++) m.assets[l].assetId === k && (i = l);
                                m.current = i, m.play(m.assets[m.current]);
                            },
                            onStateChange: function(b) {
                                if ("tvp:media:videoended" === b) {
                                    m.current++, m.assets[m.current] || (m.current = 0);
                                    var c = m.assets[m.current];
                                    m.play(c, !0), m.onNext && m.onNext(c);
                                }
                                var d = JSON.parse(JSON.stringify(m.assets[m.current]));
                                d.currentTime = m.instance.getCurrentTime(), m.onPlayerChange && a.parent && a.parent.postMessage({
                                    event: i + ":onPlayerChange",
                                    e: b,
                                    stateData: d
                                }, "*");
                            },
                            divId: m.el.id,
                            controls: m.controls,
                            version: m.version,
                            advertising: m.advertising,
                            preload: m.preload
                        }, e = [ "preload", "poster", "overlay" ], f = 0; f < e.length; f++) {
                            var g = e[f];
                            null !== m[g] && (c[g] = m[g]);
                        }
                        var l = {
                            techOrder: 1,
                            analytics: 1,
                            apiBaseUrl: 1,
                            swf: 1,
                            controls: 1,
                            width: 1,
                            height: 1,
                            mediaProviders: 1,
                            preload: 1,
                            poster: 1,
                            overlay: 1
                        };
                        for (var o in m.options) c.hasOwnProperty(o) && !l.hasOwnProperty(o) || (c[o] = m.options[o]);
                        m.player = new TVPage.player(c);
                    } else ++n < 50 && b();
                }, 150);
            }();
        }
    }
    var d = function(a, b) {
        var c = a;
        return b && (c = a[b]), void 0 !== c;
    }, e = function(a) {
        for (var b in a) if (a.hasOwnProperty(b)) return !1;
        return !0;
    }, f = function(a) {
        return void 0 !== a;
    }, g = function(a) {
        if (a || "object" == typeof a) {
            for (var b in a) a.hasOwnProperty(b) || delete a[b];
            return a;
        }
    }, h = d(location, "hostname") ? location.hostname : "", i = "tvp_" + (b.body.getAttribute("data-id") || "").replace(/-/g, "_");
    a.Player = c;
}(window, document), function(a, b) {
    var c = null, d = "tvp_" + (b.body.getAttribute("data-id") || "").replace(/-/g, "_"), e = function() {
        var b = Utils.getByClass("iframe-content"), e = function(c) {
            var e = JSON.parse(JSON.stringify(c.runTime));
            e.data = c.data, e.onResize = function() {
                setTimeout(function() {
                    a.parent && a.parent.postMessage({
                        event: d + ":modal_resize",
                        height: b.offsetHeight + "px"
                    }, "*");
                }, 0);
            }, e.onNext = function(b) {
                b && setTimeout(function() {
                    a.parent && a.parent.postMessage({
                        event: d + ":player_next",
                        next: b
                    }, "*");
                }, 0);
            }, new Player("tvp-player-el", e, c.selectedVideo.id);
        };
        a.addEventListener("message", function(a) {
            if (a && Utils.isset(a, "data") && Utils.isset(a.data, "event")) {
                var b = a.data;
                if (d + ":modal_data" === b.event) {
                    e(b);
                    var f = b.runTime;
                    f.loginid || f.loginId;
                    c = Utils.isset(f.channel) && Utils.isset(f.channel.id) ? f.channel.id : f.channelId;
                }
            }
        }), setTimeout(function() {
            a.parent && a.parent.postMessage({
                event: d + ":modal_initialized",
                height: b.offsetHeight + 20 + "px"
            }, "*");
        }, 0);
    }, f = function(a) {
        return void 0 === a;
    };
    if (f(a.TVPage) || f(a._tvpa) || f(a.Utils) || f(a.Analytics) || f(a.Player)) {
        var g = 0;
        !function b() {
            setTimeout(function() {
                f(a.TVPage) || f(a._tvpa) || f(a.Utils) || f(a.Analytics) || f(a.Player) ? ++g < 50 && b() : e();
            }, 150);
        }();
    } else e();
}(window, document);