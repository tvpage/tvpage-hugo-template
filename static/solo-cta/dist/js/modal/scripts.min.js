!function(a, b) {
    function c() {
        this.debounce = function(a, b, c) {
            var d;
            return function() {
                var e = this, f = arguments, g = function() {
                    d = null, c || a.apply(e, f);
                }, h = c && !d;
                clearTimeout(d), d = setTimeout(g, b), h && a.apply(e, f);
            };
        }, this.getByClass = function(a) {
            return b.getElementsByClassName(a || "")[0];
        }, this.formatDuration = function(a) {
            if (void 0 !== a) {
                var b = new Date(0, 0, 0);
                b.setSeconds(Number(a));
                return (b.getHours() ? b.getHours() : "") + (b.getMinutes() < 10 ? "0" + b.getMinutes() : b.getMinutes()) + ":" + (b.getSeconds() < 10 ? "0" + b.getSeconds() : b.getSeconds());
            }
        }, this.isset = function(a, b) {
            if (arguments.length) {
                var c = a;
                return b && (c = a[b]), void 0 !== c;
            }
        }, this.sendPost = function(b, c, d) {
            setTimeout(function() {
                a.parent && (d = d || {}, d.event = b + c, a.parent.postMessage(d, "*"));
            }, 0);
        }, this.tmpl = function(a, b) {
            if (a || "object" == typeof b) return a.replace(/\{([\w\.]*)\}/g, function(a, c) {
                for (var d = c.split("."), e = b[d.shift()], f = 0, g = d.length; f < g; f++) e = e[d[f]];
                return void 0 !== e && null !== e ? e : "";
            });
        }, this.trimText = function(a, b) {
            var c = a || "", d = b ? Number(b) : 0;
            return a.length > d && (c = c.substring(0, Number(d)) + "..."), c;
        };
    }
    a.Utils = new c();
}(window, document), function(a, b) {
    function c() {
        this.initConfig = function(a) {
            if (!(d(a) && d(a.loginId) && d(a.domain) && d(a.logUrl))) return console.warn("need config");
            var b = {
                logUrl: a.logUrl,
                li: a.loginId,
                gaDomain: a.domain
            };
            a.firstPartyCookies && (b.firstPartyCookieDomain = a.cookieDomain), _tvpa.push([ "config", b ]);
        }, this.track = function(a, b) {
            a && d(b) && d(_tvpa) && _tvpa.push([ "track", a, b ]);
        };
    }
    var d = function(a, b) {
        var c = a;
        return b && (c = a[b]), void 0 !== c;
    };
    a.Analytics = c;
}(window, document), function(a, b) {
    function c(c, i, j) {
        if (c && d(i) && d(i.data) && !(i.data.length <= 0)) {
            this.options = i, this.instance = null, this.el = "string" == typeof c ? b.getElementById(c) : c, 
            this.isFullScreen = !1, this.initialResize = !0, this.autoplay = !!d(i.autoplay) && Number(i.autoplay), 
            this.autonext = !d(i.autonext) || Number(i.autonext), this.version = d(i.player_version) ? i.player_version : null, 
            this.removeControls = d(i.remove_controls) ? i.remove_controls : null, this.techOrder = d(i.tech_order) ? i.tech_order : null, 
            this.analytics = d(i.analytics) ? i.analytics : null, this.apiBaseUrl = d(i.api_base_url) ? i.api_base_url : null, 
            this.mediaProviders = d(i.media_providers) ? i.media_providers : null, this.preload = d(i.preload) ? i.preload : null, 
            this.poster = d(i.poster) ? i.poster : null, this.overlay = d(i.overlay) ? i.overlay : null, 
            this.playbutton = g({
                height: d(i.play_button_height) ? i.play_button_height : null,
                width: d(i.play_button_width) ? i.play_button_width : null,
                backgroundColor: d(i.play_button_background_color) ? i.play_button_background_color : null,
                borderRadius: d(i.play_button_border_radius) ? i.play_button_border_radius : null,
                borderWidth: d(i.play_button_border_width) ? i.play_button_border_width : null,
                borderColor: d(i.play_button_border_color) ? i.play_button_border_color : null,
                borderStyle: d(i.play_button_border_style) ? i.play_button_border_style : null,
                iconColor: d(i.play_button_icon_color) ? i.play_button_icon_color : null
            }), this.floater = g({
                controlbarColor: d(i.control_bar_color) ? i.control_bar_color : null,
                iconColor: d(i.icon_color) ? i.icon_color : null,
                removeControls: d(i.remove_controls) ? i.remove_controls : null
            }), this.seekBar = g({
                progressColor: d(i.progress_color) ? i.progress_color : null
            }), this.controls = g({
                active: !0,
                seekBar: this.seekBar,
                floater: this.floater,
                playbutton: this.playbutton,
                overlayColor: d(i.overlay_color) ? i.overlay_color : null,
                overlayOpacity: d(i.overlay_opacity) ? i.overlay_opacity : null
            });
            var k = d(i.advertising) && "object" == typeof i.advertising && !e(i.advertising) ? i.advertising : {};
            this.advertising = g({
                enabled: !!d(k.enabled) && k.enabled,
                adServerUrl: d(k.adServerUrl) ? k.adServerUrl : null,
                adTimeout: d(k.adTimeout) ? k.adTimeout : "2000",
                maxAds: d(k.maxAds) ? k.maxAds : "100",
                adInterval: d(k.adInterval) ? String(k.adInterval) : "0"
            }), this.onResize = d(i.onResize) && f(i.onResize) ? i.onResize : null, this.onNext = d(i.onNext) && f(i.onNext) ? i.onNext : null, 
            this.onPlayerReady = d(i.onPlayerReady) && f(i.onPlayerReady) ? i.onPlayerReady : null, 
            this.onFullscreenChange = d(i.onFullscreenChange) && "function" == typeof i.onFullscreenChange ? i.onFullscreenChange : null, 
            this.assets = function(a) {
                for (var b = [], c = 0; c < a.length; c++) {
                    var f = a[c];
                    if (e(f)) break;
                    var g = f.asset;
                    if (g.assetId = f.id, g.assetTitle = f.title, g.loginId = f.loginId, d(f, "events") && f.events.length) g.analyticsLogUrl = f.analytics, 
                    g.analyticsObj = f.events[1].data; else {
                        var h = d(f, "parentId") ? f.parentId : d(i, "channel") ? i.channel.id : 0;
                        h || !i.channelId && !i.channelid || (h = i.channelId || i.channelid), g.analyticsObj = {
                            pg: h,
                            vd: f.id,
                            li: f.loginId
                        };
                    }
                    g.sources || (g.sources = [ {
                        file: g.videoId
                    } ]), g.type = g.type || "youtube", b.push(g);
                }
                return b;
            }(i.data);
            var l = this;
            this.getOption = function(a) {
                return this.options.hasOwnProperty(a) ? this.options.hasOwnProperty(a) : null;
            }, this.play = function(a, b, c) {
                if (a) {
                    var e = !1, f = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                    b ? (f || d(this.autonext) && !this.autonext) && (e = !0) : (f || d(this.autoplay) && !this.autoplay) && (e = !0), 
                    c || (this.current = this.getCurrentIndex(a.assetId)), e ? this.instance.cueVideo(a) : this.instance.loadVideo(a);
                }
            }, this.createAsset = function(a) {
                if (a && "object" == typeof a && !e(a) && d(a, "asset")) {
                    var b = a.asset;
                    if (b.assetId = a.id, b.assetTitle = a.title, b.loginId = a.loginId, d(a, "events") && a.events.length) b.analyticsLogUrl = a.analytics, 
                    b.analyticsObj = a.events[1].data; else {
                        var c = d(a, "parentId") ? a.parentId : d(i, "channel") ? i.channel.id : 0;
                        c || !i.channelId && !i.channelid || (c = i.channelId || i.channelid), b.analyticsObj = {
                            pg: c,
                            vd: a.id,
                            li: a.loginId
                        };
                    }
                    return b.sources || (b.sources = [ {
                        file: b.videoId
                    } ]), b.type = b.type || "youtube", b;
                }
            }, this.addData = function(a) {
                if (a && a.length) {
                    for (var b = [], c = 0; c < a.length; c++) b.push(this.createAsset(a[c]));
                    this.assets = this.assets.concat(b);
                }
            }, this.resize = function() {
                if (l.instance && !l.isFullScreen) {
                    var a, b;
                    if (arguments.length > 1 && arguments[0] && arguments[1]) a = arguments[0], b = arguments[1]; else {
                        var c = l.el.parentNode;
                        a = c.clientWidth, b = c.clientHeight;
                    }
                    l.instance.resize(a, b), l.onResize && (l.onResize(l.initialResize, [ a, b ]), l.initialResize = !1);
                }
            }, this.getCurrentIndex = function(a) {
                for (var b = 0, c = 0; c < this.assets.length; c++) this.assets[c].assetId === (a || "") && (b = c);
                return b;
            };
            var m = 0;
            !function b() {
                setTimeout(function() {
                    if (d(a, "TVPage") && d(a, "_tvpa")) {
                        for (var c = {
                            techOrder: l.techOrder,
                            mediaProviders: l.mediaProviders,
                            analytics: {
                                tvpa: l.analytics
                            },
                            apiBaseUrl: l.apiBaseUrl,
                            swf: "//cdnjs.tvpage.com/tvplayer/tvp-" + l.version + ".swf",
                            onReady: function(b, c) {
                                l.analytics = new Analytics();
                                var e = i.loginId || i.loginid;
                                if (l.analytics.initConfig({
                                    domain: h,
                                    logUrl: l.apiBaseUrl + "/__tvpa.gif",
                                    loginId: e,
                                    firstPartyCookies: i.firstpartycookies,
                                    cookieDomain: i.cookiedomain
                                }), l.analytics.track("ci", {
                                    li: e
                                }), l.instance = c, l.resize(), d(a, "BigScreen") && (BigScreen.onchange = function() {
                                    l.isFullScreen = !l.isFullScreen, l.onFullscreenChange && l.onFullscreenChange();
                                }), a.location !== a.parent.location && /iPad|iPhone|iPod|iPhone Simulator|iPad Simulator/.test(navigator.userAgent) && !a.MSStream) {
                                    var f = function(a) {
                                        if (a && d(a, "data") && d(a.data, "event") && "tvp_" + i.id.replace(/-/g, "_") + ":modal_holder_resize" === a.data.event) {
                                            var b = a.data.size || [];
                                            l.resize(b[0], b[1]);
                                        }
                                    };
                                    a.removeEventListener("message", f, !1), a.addEventListener("message", f, !1);
                                } else {
                                    var g = l.resize;
                                    a.removeEventListener("message", g, !1), a.addEventListener("resize", g);
                                }
                                l.el.querySelector(".tvp-progress-bar").style.backgroundColor = l.progressColor;
                                if (j && j.length) for (var k = 0; k < l.assets.length; k++) l.assets[k].assetId === j && k;
                                l.onPlayerReady && l.onPlayerReady(), l.current = l.getCurrentIndex(j), l.play(l.assets[l.current], null, !0);
                            },
                            onStateChange: function(a) {
                                if ("tvp:media:videoended" === a) {
                                    l.current++, l.assets[l.current] || (l.current = 0);
                                    var b = l.assets[l.current];
                                    l.play(b, !0), l.onNext && l.onNext(b);
                                }
                            },
                            divId: l.el.id,
                            controls: l.controls,
                            version: l.version,
                            advertising: l.advertising,
                            preload: l.preload
                        }, e = [ "preload", "poster", "overlay" ], f = 0; f < e.length; f++) {
                            var g = e[f];
                            null !== l[g] && (c[g] = l[g]);
                        }
                        var k = {
                            techOrder: 1,
                            analytics: 1,
                            apiBaseUrl: 1,
                            swf: 1,
                            controls: 1,
                            width: 1,
                            height: 1,
                            mediaProviders: 1,
                            preload: 1,
                            poster: 1,
                            overlay: 1
                        };
                        for (var n in l.options) c.hasOwnProperty(n) && !k.hasOwnProperty(n) || (c[n] = l.options[n]);
                        l.player = new TVPage.player(c);
                    } else ++m < 50 && b();
                }, 150);
            }();
        }
    }
    var d = function(a, b) {
        var c = a;
        return b && (c = a[b]), void 0 !== c;
    }, e = function(a) {
        for (var b in a) if (a.hasOwnProperty(b)) return !1;
        return !0;
    }, f = function(a) {
        return void 0 !== a;
    }, g = function(a) {
        if (a || "object" == typeof a) {
            for (var b in a) a.hasOwnProperty(b) || delete a[b];
            return a;
        }
    }, h = d(location, "hostname") ? location.hostname : "";
    a.Player = c;
}(window, document), function(a, b) {
    function c(a) {
        a.hasOwnProperty("data-simple-scrollbar") || Object.defineProperty(a, "data-simple-scrollbar", new SimpleScrollbar(a));
    }
    function d(a, c) {
        function d(a) {
            var b = a.pageY - f;
            f = a.pageY, g(function() {
                c.el.scrollTop += b / c.scrollRatio;
            });
        }
        function e() {
            a.classList.remove("ss-grabbed"), b.body.classList.remove("ss-grabbed"), b.removeEventListener("mousemove", d), 
            b.removeEventListener("mouseup", e);
        }
        var f;
        a.addEventListener("mousedown", function(c) {
            return f = c.pageY, a.classList.add("ss-grabbed"), b.body.classList.add("ss-grabbed"), 
            b.addEventListener("mousemove", d), b.addEventListener("mouseup", e), !1;
        });
    }
    function e(a) {
        for (this.target = a, this.bar = '<div class="ss-scroll">', this.wrapper = b.createElement("div"), 
        this.wrapper.setAttribute("class", "ss-wrapper"), this.el = b.createElement("div"), 
        this.el.setAttribute("class", "ss-content"), this.wrapper.appendChild(this.el); this.target.firstChild; ) this.el.appendChild(this.target.firstChild);
        this.target.appendChild(this.wrapper), this.target.insertAdjacentHTML("beforeend", this.bar), 
        this.bar = this.target.lastChild, d(this.bar, this), this.moveBar(), this.el.addEventListener("scroll", this.moveBar.bind(this)), 
        this.el.addEventListener("mouseenter", this.moveBar.bind(this)), this.target.classList.add("ss-container");
        var c = window.getComputedStyle(a);
        "0px" === c.height && "0px" !== c["max-height"] && (a.style.height = c["max-height"]);
    }
    function f() {
        for (var a = b.querySelectorAll("*[ss-container]"), d = 0; d < a.length; d++) c(a[d]);
    }
    var g = a.requestAnimationFrame || a.setImmediate || function(a) {
        return setTimeout(a, 0);
    };
    e.prototype = {
        moveBar: function(a) {
            var b = this.el.scrollHeight, c = this.el.clientHeight, d = this;
            this.scrollRatio = c / b, g(function() {
                d.scrollRatio >= 1 ? d.bar.classList.add("ss-hidden") : (d.bar.classList.remove("ss-hidden"), 
                d.bar.style.cssText = "height:" + 100 * d.scrollRatio + "%; top:" + d.el.scrollTop / b * 100 + "%;right:-" + (d.target.clientWidth - d.bar.clientWidth) + "px;");
            });
        }
    }, b.addEventListener("DOMContentLoaded", f), e.initEl = c, e.initAll = f, a.SimpleScrollbar = e;
}(window, document), function(a, b) {
    function c(c, d) {
        var e = this;
        this.player = c, this.dataMethod = b.body.classList.contains("dynamic") ? "dynamic" : "static", 
        this.allVideos = [], this.eventPrefix = "tvp_" + (b.body.getAttribute("data-id") || "").replace(/-/g, "_"), 
        this.init = function() {
            e.render(), e.cacheDOM(), e.bindMenuEvent(), e.bindClickEvent(), e.bindLoadMoreEvent(), 
            e.hideMenuEvents(), e.listenToResize();
        }, this.cacheDOM = function() {
            e.hiddenMenu = b.getElementById("tvp-hidden-menu"), e.scrollMenu = b.querySelectorAll(".ss-content")[0], 
            e.tvpVid = b.querySelectorAll(".tvp-video"), e.hamburguer = b.getElementById("tvp-hamburger-container"), 
            e.toggles = b.querySelectorAll(".tvp-hamburger"), e.payerCont = b.querySelectorAll(".tvp-player")[0], 
            e.noVideosContainer = b.getElementById("tvp-no-videos-container"), e.tvpNoVideos = b.getElementsByClassName("tvp-no-videos"), 
            e.scrollBar = b.getElementsByClassName("ss-scroll")[0], e.slideMenu = b.getElementById("tvp-slide-menu");
        }, this.render = function() {
            var a = d.data || [];
            if (!(a.length < 1)) {
                e.fullScreenMenu();
                var c = b.getElementsByClassName("tvp-video-details"), f = b.getElementById("tvp-hidden-menu"), g = b.createElement("div"), h = b.createElement("div");
                g.setAttribute("id", "tvp-clearfix"), h.setAttribute("id", "tvp-no-videos-container"), 
                f.appendChild(h), f.insertBefore(g, h), e.vidCount = 0;
                for (var i = 0; i < a.length; i++) {
                    e.vidCount++;
                    var j = a[i];
                    if (e.allVideos.push(j), j.title = Utils.trimText(j.title, 100), j.duration = Utils.formatDuration(j.duration), 
                    g.innerHTML += Utils.tmpl(d.templates["menu-item"], j), Utils.isset(d, "menu_item_play_category_tag_attribute") && ("" + d.menu_item_play_category_tag_attribute).trim().length) {
                        var k = j[d.menu_item_play_category_tag_attribute];
                        if (k) {
                            k = k.replace(/_/g, " ");
                            var l = b.createDocumentFragment(), m = b.createElement("div");
                            m.classList.add("tvp-category-tag"), m.innerHTML += k, l.appendChild(m), c[i].appendChild(l);
                        }
                    }
                    if ("static" !== e.dataMethod && a.length > 4) {
                        var n = b.createDocumentFragment(), o = b.createElement("div");
                        o.classList.add("tvp-no-videos"), n.appendChild(o), h.appendChild(n);
                    }
                }
                "static" === e.dataMethod && (e.videoCountP = b.createTextNode(e.vidCount + " " + (e.vidCount > 2 ? "videos" : "video")), 
                e.tvpVideoCount = b.querySelectorAll(".tvp-video-count")[0], e.tvpVideoCount.appendChild(e.videoCountP)), 
                f.style.cssText = "height:" + (b.querySelectorAll(".tvp-player")[0].offsetHeight - 36) + "px;", 
                SimpleScrollbar.initAll();
            }
        }, this.bindMenuEvent = function() {
            var a = e.player.assets[0];
            e.setActiveItem(a.assetId);
            for (var b = e.toggles.length - 1; b >= 0; b--) e.toggles[b].onclick = function(a) {
                e.toggleMenu();
            };
        }, this.bindLoadMoreEvent = function(a) {
            e.scrollMenu.addEventListener("scroll", Utils.debounce(function() {
                var a = e.scrollMenu.scrollTop, b = e.hiddenMenu.clientHeight - e.scrollMenu.scrollHeight, c = 100 * a / b;
                c = Math.round(c), (c = Math.abs(c)) >= 50 && c <= 100 && "dynamic" == e.dataMethod && e.loadMore();
            }, 30));
        }, this.bindClickEvent = function() {
            for (var a = e.tvpVid.length - 1; a >= 0; a--) e.videoClick(e.tvpVid[a]);
        }, this.toggleMenu = function() {
            e.slideMenu.classList.contains("active") ? e.slideMenu.classList.remove("active") : e.slideMenu.classList.add("active");
        }, this.hideMenu = function() {
            e.slideMenu.classList.remove("active");
        }, this.hideMenuEvents = function() {
            var a = b.getElementsByClassName("tvp-overlay")[0];
            a && (a.onclick = function() {
                e.hideMenu();
            });
        }, this.fullScreenMenu = function() {
            var a = b.getElementById("tvp-player-el"), c = a.getElementsByTagName("iframe");
            if (c.length) {
                var e = b.createDocumentFragment(), f = b.createElement("div");
                f.setAttribute("id", "tvp-slide-menu"), f.innerHTML = d.templates.menu, e.appendChild(f), 
                c[0].parentNode.insertBefore(e, c[0].nextSibling);
            }
        }, this.listenToResize = function() {
            function b() {
                var a = e.payerCont.offsetHeight - 36 + "px;";
                e.hiddenMenu.style.cssText = "height:" + a;
                var b = e.scrollMenu.scrollHeight, c = e.scrollMenu.clientHeight, d = c / b;
                e.scrollBar.style.cssText += "height:" + Math.floor(100 * d) + "%;top:" + e.scrollMenu.scrollTop / b * 100 + "%;right:-" + (e.hiddenMenu.clientWidth - 9) + "px;";
            }
            a.removeEventListener("resize", b, !1), a.addEventListener("resize", b, !1);
        }, this.update = function(a) {
            d.data;
            if (e.noVideosContainer) {
                e.deleteDivs();
                for (var c = 0; c < a.length; c++) if (e.allVideos.push(a[c]), d.data.push(a[c]), 
                e.noVideosContainer.setAttribute("id", "tvp-clearfix"), a[c].duration = Utils.formatDuration(a[c].duration), 
                e.noVideosContainer.innerHTML += Utils.tmpl(d.templates["menu-item"], a[c]), e.scrollMenu.appendChild(e.noVideosContainer), 
                Utils.isset(d, "menu_item_play_category_tag_attribute") && ("" + d.menu_item_play_category_tag_attribute).trim().length) {
                    var f = a[c][d.menu_item_play_category_tag_attribute];
                    if (f) {
                        f = f.replace(/_/g, " ");
                        var g = b.createDocumentFragment(), h = b.createElement("div");
                        h.classList.add("tvp-category-tag"), h.innerHTML += f, g.appendChild(h), e.noVideosContainer.getElementsByClassName("tvp-video-details")[c].appendChild(g);
                    }
                }
            } else for (var i = b.createDocumentFragment(), j = b.createElement("div"), c = 0; c < a.length; c++) if (e.allVideos.push(a[c]), 
            d.data.push(a[c]), j.setAttribute("id", "tvp-clearfix"), a[c].duration = Utils.formatDuration(a[c].duration), 
            j.innerHTML += Utils.tmpl(d.templates["menu-item"], a[c]), i.appendChild(j), e.scrollMenu.appendChild(j), 
            Utils.isset(d, "menu_item_play_category_tag_attribute") && ("" + d.menu_item_play_category_tag_attribute).trim().length) {
                var f = (d.menu_item_play_category_tag_attribute, a[c][d.menu_item_play_category_tag_attribute]);
                if (f) {
                    f = f.replace(/_/g, " ");
                    var g = b.createDocumentFragment(), h = b.createElement("div");
                    h.classList.add("tvp-category-tag"), h.innerHTML += f, g.appendChild(h), j.getElementsByClassName("tvp-video-details")[c].appendChild(g);
                }
            }
            e.cacheDOM(), e.bindClickEvent();
        }, this.deleteDivs = function() {
            for (var a = e.tvpNoVideos.length - 1; a >= 0; a--) e.noVideosContainer.removeChild(e.tvpNoVideos[a]);
        }, this.clearActiveItems = function() {
            for (var a = e.tvpVid.length - 1; a >= 0; a--) e.tvpVid[a].classList.contains("active") && e.tvpVid[a].classList.remove("active");
        }, this.setActiveItem = function(a) {
            for (var b = e.tvpVid.length - 1; b >= 0; b--) {
                var c = e.tvpVid[b];
                c.id.split("-").pop() !== a || c.classList.contains("active") || (this.clearActiveItems(), 
                c.classList.add("active"));
            }
        }, this.videoClick = function(a) {
            a.onclick = function(a) {
                if (this.classList.contains("tvp-video")) {
                    var b = this.id.split("-").pop(), d = e.allVideos.filter(function(a) {
                        return a.id === b;
                    });
                    Utils.sendPost(e.eventPrefix, ":player_next", {
                        next: d[0]
                    }), e.setActiveItem(b), c.play(c.createAsset(d[0])), e.toggleMenu();
                }
            };
        };
    }
    a.Menu = c;
}(window, document), function(a, b) {
    var c, d = "tvp_" + (b.body.getAttribute("data-id") || "").replace(/-/g, "_"), e = 0, f = !1, g = !1, h = function(a, b) {
        var d = "tvp_" + Math.floor(50005 * Math.random());
        return i({
            src: function() {
                var b = a.channel || {}, f = b.parameters || {}, g = a.api_base_url + "/channels/" + (b.id || a.channelid || a.channelId) + "/videos?X-login-id=" + (a.loginid || a.loginId);
                for (var h in f) g += "&" + h + "=" + f[h];
                return g += "&n=" + c + "&p=" + e, g += "&callback=" + d;
            }(),
            cbName: d
        }, b);
    }, i = function(c, d) {
        var e = b.createElement("script");
        if (e.src = c.src, d && "function" == typeof d) {
            a[c.cbName || "callback"] = d;
            (c.body || b.body).appendChild(e);
        }
    }, j = function() {
        var b = Utils.getByClass("iframe-content"), i = function(a) {
            var i = null, j = null, k = JSON.parse(JSON.stringify(a.runTime)), l = JSON.parse(JSON.stringify(a.runTime)), m = Utils.isset(a.runTime, "playlist") ? a.runTime.playlist : null;
            k.data = a.data, c = k.items_per_page || 6, k.onResize = function() {
                Utils.sendPost(d, ":modal_resize", {
                    height: b.offsetHeight + "px"
                });
            }, "show" === m && m ? (k.onPlayerReady = function() {
                j.init();
            }, k.onNext = function() {
                var a = i.assets[i.current];
                j.setActiveItem(a.assetId), j.hideMenu(), Utils.sendPost(d, ":player_next", {
                    next: a
                });
            }, k.onFullscreenChange = function() {
                j.hideMenu();
            }, i = new Player("tvp-player-el", k, a.selectedVideo.id), l.data = a.data || [], 
            j = new Menu(i, l), Menu.prototype.loadMore = function() {
                f || g || (e++, g = !0, h(k, function(a) {
                    g = !1, f = !a.length || a.length < c, i.addData(a), j.update(a);
                }));
            }) : (k.onNext = function(a) {
                a && Utils.sendPost(d, ":player_next", {
                    next: a
                });
            }, i = new Player("tvp-player-el", k, a.selectedVideo.id));
        };
        a.addEventListener("message", function(a) {
            if (a && Utils.isset(a, "data") && Utils.isset(a.data, "event")) {
                var b = a.data;
                d + ":modal_data" === b.event && i(b);
            }
        }), Utils.sendPost(d, ":modal_initialized", {
            height: b.offsetHeight + 20 + "px"
        });
    }, k = function(a) {
        return void 0 === a;
    };
    if (k(a.TVPage) || k(a._tvpa) || k(a.Utils) || k(a.Analytics) || k(a.Player) || k(a.Menu) || k(a.SimpleScrollbar)) {
        var l = 0;
        !function b() {
            setTimeout(function() {
                k(a.TVPage) || k(a._tvpa) || k(a.Utils) || k(a.Analytics) || k(a.Player) || k(a.Menu) || k(a.SimpleScrollbar) ? ++l < 50 && b() : j();
            }, 150);
        }();
    } else j();
}(window, document);