!function(a, b) {
    function c() {
        var c = this;
        this.debounce = function(a, b, c) {
            var d;
            return function() {
                var e = this, f = arguments, g = function() {
                    d = null, c || a.apply(e, f);
                }, h = c && !d;
                clearTimeout(d), d = setTimeout(g, b), h && a.apply(e, f);
            };
        }, this.formatDuration = function(a) {
            if (void 0 !== a) {
                var b = new Date(0, 0, 0);
                b.setSeconds(Number(a));
                return (b.getHours() ? b.getHours() : "") + (b.getMinutes() < 10 ? "0" + b.getMinutes() : b.getMinutes()) + ":" + (b.getSeconds() < 10 ? "0" + b.getSeconds() : b.getSeconds());
            }
        }, this.getByClass = function(a) {
            return b.getElementsByClassName(a || "")[0];
        }, this.hasClass = function(a, b) {
            if (a && b && b.length) {
                for (var c = !1, d = 0; d < b.length && !c; d++) c = a.classList.contains(b[d]);
                return c;
            }
        }, this.addEvent = function(a, b, c, d) {
            function e(a) {
                var b, e = this, f = function(a) {
                    if (a && a !== e) {
                        for (var d = 0; d < c.length; d++) if (a.classList.contains(c[d])) return b = c[d], 
                        a;
                        return f(a.parentNode);
                    }
                    return !1;
                }, g = f(a.target);
                !1 !== g && d.call(this, b, g, a);
            }
            a.removeEventListener(b, e, !1), a.addEventListener(b, e, !1);
        }, this.getSettings = function() {
            var a = {}, d = function(a) {
                if (c.isset(a) && c.isset(a, "__TVPage__") && c.isset(a.__TVPage__, "config")) return a.__TVPage__.config;
            }(parent), e = b.body.getAttribute("data-id");
            if (c.isset(d, e)) return a = d[e], a.name = e, a;
        }, this.jsonpCall = function(c, d) {
            var e = b.createElement("script");
            if (e.src = c.src, d && "function" == typeof d) {
                a[c.cbName || "callback"] = d;
                (c.body || b.body).appendChild(e);
            }
        }, this.random = function() {
            return "tvp_" + Math.floor(50005 * Math.random());
        }, this.removeExisting = function(a, b) {
            var c = a.getElementsByClassName(b)[0];
            c && c.parentElement.removeChild(c);
        }, this.render = function(a, c) {
            if (a && c) {
                var d = b.createDocumentFragment(), e = b.createElement("div");
                e.classList.add("tvp-player"), e.innerHTML = '<div id="tvp-player-el-' + a + '" class="tvp-player-el"></div></div>', 
                d.appendChild(e), c.appendChild(d);
            }
        }, this.isFunction = function(a) {
            return void 0 !== a;
        }, this.isset = function(a, b) {
            if (arguments.length) {
                var c = a;
                return b && (c = a[b]), void 0 !== c;
            }
        }, this.loadData = function(a, b, d) {
            return c.jsonpCall({
                src: function() {
                    var d = a.channel || {}, e = d.parameters || {}, f = a.api_base_url + "/channels/" + (d.id || a.channelid || a.channelId) + "/videos?X-login-id=" + (a.loginid || a.loginId);
                    for (var g in e) f += "&" + g + "=" + e[g];
                    return f += "&n=" + (c.isset(a, "items_per_page") ? a.items_per_page : 6) + "&p=" + (c.isset(a, "channelVideosPage") ? a.channelVideosPage : 0), 
                    f += "&callback=" + b;
                }(),
                cbName: b
            }, d);
        }, this.tmpl = function(a, b) {
            if (a || "object" == typeof b) return a.replace(/\{([\w\.]*)\}/g, function(a, c) {
                for (var d = c.split("."), e = b[d.shift()], f = 0, g = d.length; f < g; f++) e = e[d[f]];
                return void 0 !== e && null !== e ? e : "";
            });
        }, this.trimText = function(a, b) {
            var c = a || "", d = b ? Number(b) : 0;
            return a.length > d && (c = c.substring(0, Number(d)) + "..."), c;
        };
    }
    a.Utils = new c();
}(window, document), function(a, b) {
    function c() {
        this.initConfig = function(a) {
            if (!(d(a) && d(a.loginId) && d(a.domain) && d(a.logUrl))) return console.warn("need config");
            var b = {
                logUrl: a.logUrl,
                li: a.loginId,
                gaDomain: a.domain
            };
            a.firstPartyCookies && (b.firstPartyCookieDomain = a.cookieDomain), _tvpa.push([ "config", b ]);
        }, this.track = function(a, b) {
            a && d(b) && d(_tvpa) && _tvpa.push([ "track", a, b ]);
        };
    }
    var d = function(a, b) {
        var c = a;
        return b && (c = a[b]), void 0 !== c;
    };
    a.Analytics = c;
}(window, document), function(a, b) {
    function c(c, i, j) {
        if (c && d(i) && d(i.data) && !(i.data.length <= 0)) {
            this.options = i, this.instance = null, this.el = "string" == typeof c ? b.getElementById(c) : c, 
            this.isFullScreen = !1, this.initialResize = !0, this.isReady = !1, this.autoplay = !!d(i.autoplay) && Number(i.autoplay), 
            this.autonext = !d(i.autonext) || Number(i.autonext), this.version = d(i.player_version) ? i.player_version : null, 
            this.removeControls = d(i.remove_controls) ? i.remove_controls : null, this.techOrder = d(i.tech_order) ? i.tech_order : null, 
            this.analytics = d(i.analytics) ? i.analytics : null, this.apiBaseUrl = d(i.api_base_url) ? i.api_base_url : null, 
            this.mediaProviders = d(i.media_providers) ? i.media_providers : null, this.preload = d(i.preload) ? i.preload : null, 
            this.poster = d(i.poster) ? i.poster : null, this.overlay = d(i.overlay) ? i.overlay : null, 
            this.playbutton = g({
                height: d(i.play_button_height) ? i.play_button_height : null,
                width: d(i.play_button_width) ? i.play_button_width : null,
                backgroundColor: d(i.play_button_background_color) ? i.play_button_background_color : null,
                borderRadius: d(i.play_button_border_radius) ? i.play_button_border_radius : null,
                borderWidth: d(i.play_button_border_width) ? i.play_button_border_width : null,
                borderColor: d(i.play_button_border_color) ? i.play_button_border_color : null,
                borderStyle: d(i.play_button_border_style) ? i.play_button_border_style : null,
                iconColor: d(i.play_button_icon_color) ? i.play_button_icon_color : null
            }), this.floater = g({
                controlbarColor: d(i.control_bar_color) ? i.control_bar_color : null,
                iconColor: d(i.icon_color) ? i.icon_color : null,
                removeControls: d(i.remove_controls) ? i.remove_controls : null
            }), this.seekBar = g({
                progressColor: d(i.progress_color) ? i.progress_color : null
            }), this.controls = g({
                active: !0,
                seekBar: this.seekBar,
                floater: this.floater,
                playbutton: this.playbutton,
                overlayColor: d(i.overlay_color) ? i.overlay_color : null,
                overlayOpacity: d(i.overlay_opacity) ? i.overlay_opacity : null
            });
            var k = d(i.advertising) && "object" == typeof i.advertising && !e(i.advertising) ? i.advertising : {};
            this.advertising = g({
                enabled: !!d(k.enabled) && k.enabled,
                adServerUrl: d(k.adServerUrl) ? k.adServerUrl : null,
                adTimeout: d(k.adTimeout) ? k.adTimeout : "2000",
                maxAds: d(k.maxAds) ? k.maxAds : "100",
                adInterval: d(k.adInterval) ? String(k.adInterval) : "0"
            }), this.onResize = d(i.onResize) && f(i.onResize) ? i.onResize : null, this.onNext = d(i.onNext) && f(i.onNext) ? i.onNext : null, 
            this.onPlayerReady = d(i.onPlayerReady) && f(i.onPlayerReady) ? i.onPlayerReady : null, 
            this.onFullscreenChange = d(i.onFullscreenChange) && "function" == typeof i.onFullscreenChange ? i.onFullscreenChange : null, 
            this.assets = function(a) {
                for (var b = [], c = 0; c < a.length; c++) {
                    var f = a[c];
                    if (e(f)) break;
                    var g = f.asset;
                    if (g.assetId = f.id, g.assetTitle = f.title, g.loginId = f.loginId, d(f, "events") && f.events.length) g.analyticsLogUrl = f.analytics, 
                    g.analyticsObj = f.events[1].data; else {
                        var h = d(f, "parentId") ? f.parentId : d(i, "channel") ? i.channel.id : 0;
                        h || !i.channelId && !i.channelid || (h = i.channelId || i.channelid), g.analyticsObj = {
                            pg: h,
                            vd: f.id,
                            li: f.loginId
                        };
                    }
                    g.sources || (g.sources = [ {
                        file: g.videoId
                    } ]), g.type = g.type || "youtube", b.push(g);
                }
                return b;
            }(i.data);
            var l = this;
            this.getOption = function(a) {
                return this.options.hasOwnProperty(a) ? this.options.hasOwnProperty(a) : null;
            }, this.play = function(a, b, c) {
                if (a) {
                    var e = !1, f = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
                    b ? (f || d(this.autonext) && !this.autonext) && (e = !0) : (f || d(this.autoplay) && !this.autoplay) && (e = !0), 
                    c || (this.current = this.getCurrentIndex(a.assetId)), e ? this.instance.cueVideo(a) : this.instance.loadVideo(a);
                }
            }, this.createAsset = function(a) {
                if (a && "object" == typeof a && !e(a) && d(a, "asset")) {
                    var b = a.asset;
                    if (b.assetId = a.id, b.assetTitle = a.title, b.loginId = a.loginId, d(a, "events") && a.events.length) b.analyticsLogUrl = a.analytics, 
                    b.analyticsObj = a.events[1].data; else {
                        var c = d(a, "parentId") ? a.parentId : d(i, "channel") ? i.channel.id : 0;
                        c || !i.channelId && !i.channelid || (c = i.channelId || i.channelid), b.analyticsObj = {
                            pg: c,
                            vd: a.id,
                            li: a.loginId
                        };
                    }
                    return b.sources || (b.sources = [ {
                        file: b.videoId
                    } ]), b.type = b.type || "youtube", b;
                }
            }, this.addData = function(a) {
                if (a && a.length) {
                    for (var b = [], c = 0; c < a.length; c++) b.push(this.createAsset(a[c]));
                    this.assets = this.assets.concat(b);
                }
            }, this.resize = function() {
                if (l.instance && !l.isFullScreen) {
                    var a, b;
                    if (arguments.length > 1 && arguments[0] && arguments[1]) a = arguments[0], b = arguments[1]; else {
                        var c = l.el.parentNode;
                        a = c.clientWidth, b = c.clientHeight;
                    }
                    l.instance.resize(a, b), l.onResize && (l.onResize(l.initialResize, [ a, b ]), l.initialResize = !1);
                }
            }, this.getCurrentIndex = function(a) {
                for (var b = 0, c = 0; c < this.assets.length; c++) this.assets[c].assetId === (a || "") && (b = c);
                return b;
            };
            var m = 0;
            !function b() {
                setTimeout(function() {
                    if (d(a, "TVPage") && d(a, "_tvpa")) {
                        for (var c = {
                            techOrder: l.techOrder,
                            mediaProviders: l.mediaProviders,
                            analytics: {
                                tvpa: l.analytics
                            },
                            apiBaseUrl: l.apiBaseUrl,
                            swf: "//cdnjs.tvpage.com/tvplayer/tvp-" + l.version + ".swf",
                            onReady: function(b, c) {
                                l.analytics = new Analytics();
                                var e = i.loginId || i.loginid;
                                if (l.analytics.initConfig({
                                    domain: h,
                                    logUrl: l.apiBaseUrl + "/__tvpa.gif",
                                    loginId: e,
                                    firstPartyCookies: i.firstpartycookies,
                                    cookieDomain: i.cookiedomain
                                }), l.analytics.track("ci", {
                                    li: e
                                }), l.instance = c, l.resize(), d(a, "BigScreen") && (BigScreen.onchange = function() {
                                    l.isFullScreen = !l.isFullScreen, l.resize(), l.onFullscreenChange && l.onFullscreenChange();
                                }), a.location !== a.parent.location && /iPad|iPhone|iPod|iPhone Simulator|iPad Simulator/.test(navigator.userAgent) && !a.MSStream) {
                                    var f = function(a) {
                                        if (a && d(a, "data") && d(a.data, "event") && "tvp_" + i.id.replace(/-/g, "_") + ":modal_holder_resize" === a.data.event) {
                                            var b = a.data.size || [];
                                            l.resize(b[0], b[1]);
                                        }
                                    };
                                    a.removeEventListener("message", f, !1), a.addEventListener("message", f, !1);
                                } else {
                                    var g = l.resize;
                                    a.removeEventListener("message", g, !1), a.addEventListener("resize", g);
                                }
                                l.el.querySelector(".tvp-progress-bar").style.backgroundColor = l.progressColor;
                                if (j && j.length) for (var k = 0; k < l.assets.length; k++) l.assets[k].assetId === j && k;
                                l.onPlayerReady && l.onPlayerReady(), l.isReady = !0, l.current = l.getCurrentIndex(j), 
                                l.play(l.assets[l.current], null, !0);
                            },
                            onStateChange: function(a) {
                                if ("tvp:media:videoended" === a) {
                                    l.current++, l.assets[l.current] || (l.current = 0);
                                    var b = l.assets[l.current];
                                    l.play(b, !0), l.onNext && l.onNext(b);
                                }
                            },
                            divId: l.el.id,
                            controls: l.controls,
                            version: l.version,
                            advertising: l.advertising,
                            preload: l.preload
                        }, e = [ "preload", "poster", "overlay" ], f = 0; f < e.length; f++) {
                            var g = e[f];
                            null !== l[g] && (c[g] = l[g]);
                        }
                        var k = {
                            techOrder: 1,
                            analytics: 1,
                            apiBaseUrl: 1,
                            swf: 1,
                            controls: 1,
                            width: 1,
                            height: 1,
                            mediaProviders: 1,
                            preload: 1,
                            poster: 1,
                            overlay: 1
                        };
                        for (var n in l.options) c.hasOwnProperty(n) && !k.hasOwnProperty(n) || (c[n] = l.options[n]);
                        l.player = new TVPage.player(c);
                    } else ++m < 50 && b();
                }, 150);
            }();
        }
    }
    var d = function(a, b) {
        var c = a;
        return b && (c = a[b]), void 0 !== c;
    }, e = function(a) {
        for (var b in a) if (a.hasOwnProperty(b)) return !1;
        return !0;
    }, f = function(a) {
        return void 0 !== a;
    }, g = function(a) {
        if (a || "object" == typeof a) {
            for (var b in a) a.hasOwnProperty(b) || delete a[b];
            return a;
        }
    }, h = d(location, "hostname") ? location.hostname : "";
    a.Player = c;
}(window, document), function(a, b) {
    function c(c, d) {
        var e = this, f = !0;
        this.player = c, this.playerEl = c.el, this.allVideos = [], this.init = function() {
            e.appendMenu(), e.render(d.data), e.bindClickEvents(), e.bindLoadMoreEvent(), e.listenToResize();
        }, this.appendMenu = function() {
            var a = e.playerEl.getElementsByTagName("iframe");
            if (a.length) {
                var c = b.createDocumentFragment();
                e.slideMenu = b.createElement("div"), e.slideMenu.setAttribute("id", "tvp-slide-menu"), 
                e.slideMenu.innerHTML = d.templates.menu, c.appendChild(e.slideMenu), a[0].parentNode.insertBefore(c, a[0].nextSibling);
            }
        }, this.render = function(a) {
            if (a && a.length) {
                for (var b = !a.length || a.length < d.items_per_page, c = a || [], g = "", h = "", i = 0; i < c.length; i++) {
                    var j = c[i];
                    if (j.title = Utils.trimText(j.title, 100), j.duration = Utils.formatDuration(j.duration), 
                    Utils.isset(d, "menu_item_play_category_tag_attribute")) {
                        var k = j[d.menu_item_play_category_tag_attribute];
                        k && (k = k.replace(/_/g, " "), j.menuTagAttr = k);
                    }
                    b || (h += '<div class="tvp-no-videos"></div>'), g += Utils.tmpl(d.templates["menu-item"], j), 
                    e.allVideos.push(j);
                }
                e.hiddenMenu = e.slideMenu.querySelector("#tvp-hidden-menu"), e.deleteDivs(), e.hiddenMenu.innerHTML += g + h, 
                f && (f = !1, e.setMenuHeight(e.playerEl.offsetHeight - 36), e.setActiveItem(e.allVideos[0].id), 
                Ps.initialize(e.hiddenMenu));
            }
        }, this.bindLoadMoreEvent = function(a) {
            e.hiddenMenu.addEventListener("scroll", Utils.debounce(function() {
                var a = e.hiddenMenu.scrollTop, b = e.hiddenMenu.clientHeight - e.hiddenMenu.scrollHeight, c = 100 * a / b;
                c = Math.round(c), (c = Math.abs(c)) >= 55 && c <= 100 && e.loadMore();
            }, 30));
        }, this.bindClickEvents = function() {
            Utils.addEvent(e.playerEl, "click", [ "tvp-hamburger", "tvp-video" ], function(a, b) {
                switch (a) {
                  case "tvp-hamburger":
                    e.toggleMenu();
                    break;

                  case "tvp-video":
                    var d = b.id.split("-").pop(), f = e.allVideos.filter(function(a) {
                        return a.id === d;
                    });
                    e.setActiveItem(d), c.play(c.createAsset(f[0])), e.toggleMenu();
                }
            });
        }, this.toggleMenu = function() {
            e.slideMenu.classList.contains("active") ? e.slideMenu.classList.remove("active") : e.slideMenu.classList.add("active");
        }, this.hideMenu = function() {
            e.slideMenu.classList.remove("active");
        }, this.listenToResize = function() {
            function b(a) {
                var b = e.playerEl.parentNode.offsetHeight - 36;
                e.setMenuHeight(b), Ps.update(e.hiddenMenu);
            }
            a.removeEventListener("resize", b, !1), a.addEventListener("resize", b, !1);
        }, this.setMenuHeight = function(a) {
            e.hiddenMenu.style.cssText = "height:" + a + "px;";
        }, this.deleteDivs = function() {
            e.tvpNoVideos = e.tvpNoVideos ? e.tvpNoVideos : e.hiddenMenu.getElementsByClassName("tvp-no-videos");
            for (var a = e.tvpNoVideos.length - 1; a >= 0; a--) e.hiddenMenu.removeChild(e.tvpNoVideos[a]), 
            Ps.update(e.hiddenMenu);
        }, this.clearActiveItems = function(a) {
            for (var b = a.length - 1; b >= 0; b--) a[b].classList.contains("active") && a[b].classList.remove("active");
        }, this.setActiveItem = function(a) {
            e.tvpVid = b.querySelectorAll(".tvp-video"), e.clearActiveItems(e.tvpVid);
            for (var c = e.tvpVid.length - 1; c >= 0; c--) {
                var d = e.tvpVid[c];
                d.id.split("-").pop() !== a || d.classList.contains("active") || d.classList.add("active");
            }
        };
    }
    a.Menu = c;
}(window, document), function(a, b) {
    function c() {
        !function(a, b, c, e) {
            Utils.render(c, b.body), Utils.loadData(e, c, function(b) {
                if (b && b.length) {
                    a.parent && a.parent.postMessage({
                        event: ("tvp_" + e.id).replace(/-/g, "_") + ":handle_init",
                        data: b
                    }, "*");
                    var f = JSON.parse(JSON.stringify(e));
                    if (f.data = b || [], playlistOpt = !!Utils.isset(e, "playlist") && e.playlist, 
                    playlistOpt) {
                        f.onFullscreenChange = function() {
                            d.menu.hideMenu();
                        }, d.player = new Player("tvp-player-el-" + c, f), d.playerEl = d.player.el;
                        var g = JSON.parse(JSON.stringify(e));
                        g.data = b || [], g.channelVideosPage = 0, d.menu = new Menu(d.player, g), Menu.prototype.loadMore = function() {
                            d.lastPage || d.isFetching || (g.channelVideosPage++, d.isFetching = !0, Utils.loadData(g, c, function(a) {
                                if (a.length > d.itemsPerPage) return void d.menu.deleteDivs();
                                d.isFetching = !1, d.lastPage = !a.length || a.length < d.itemsPerPage, d.player.addData(a), 
                                d.menu.render(a);
                            }));
                        };
                        var h = setInterval(function() {
                            i(d.player, e);
                        }, 500), i = function(a, b) {
                            a.isReady && b && (clearInterval(h), d.menu.init());
                        };
                    } else d.player = new Player("tvp-player-el-" + c, f);
                }
            });
        }(a, b, Utils.random(), Utils.getSettings());
    }
    var d = {
        playerEl: null,
        player: null,
        menu: null,
        itemsPerPage: 6,
        lastPage: !1,
        isFetching: !1
    }, e = function(a) {
        return void 0 === a;
    };
    if (e(a.Utils) || e(a.Player)) {
        var f = 0;
        !function b() {
            setTimeout(function() {
                (e(a.Utils) || e(a.Player)) && ++f < 50 ? b() : c();
            }, 150);
        }();
    } else c();
}(window, document);